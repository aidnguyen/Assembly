=TEX
\documentclass{article}
\usepackage[screen,paperwidth=6in,paperheight=5in, margin =0.5in]{geometry}
\usepackage{ProofPower, graphicx, amsmath}
\begin{document}
\section{GCD in Math}
\par This lab explores how we can create and use functions in the three different languages focused on in this course: SML, C, and ASM. The function we will be trying to implement is GCD, or the greatest common divisor of two positive integers.
\par This should give us the largest number that is exactly divides both of them such that there is no remainder. For example, the GCD of 14 and 12 is 2 and the GCD of 14 and 11 is 1.

The GCD is given by the following specification:
\[ gcd: \mathbb{N} \times \mathbb{N} \implies \mathbb{N}\]
\[ gcd(m,n) = max \{d \in \mathbb{N} \vert m \bmod d = 0 \land n \bmod d = 0\}\]
One algorithm for calculating the gcd follows Euclid's method. If, for 2 natural numbers m and n, if m $>$ n, then the gcd is defined by:
\[ euclid(m,n) = \left\{ \begin{array}{l}
                        euclid(n,m \bmod n), \text{if n $>$ 0}\\
                        m
                        \end{array} 
\right. \]
\clearpage
\section{GCD in SML}
The GCD can be implemented in SML like this:
=SML 
fun euclid (m, n) = if n > 0 then euclid (n, (m mod n))
		else m;
euclid(14,12);
euclid(14,11);
euclid(558,198);
=TEX
\includegraphics[scale = 0.5]{gcd_sml.png}\\
Since SML is naturally a functional and mathematics based language, it is quite easy to implement the GCD function in SML.

\clearpage
\section{GCD in C}
GCD can also be implemented in C
=C lab2.c
#include<stdio.h>
/* The following recursive function implements the 
Euclid method of getting the greatest common divisor */
int euclid(int m, int n)
{
  if(n > 0) return euclid(n, m % n);
  else return m;
}
=TEX
Let's write an equivalent function that is more like ASM. For example,
do not use function comoposition. Do each operation on a separate line. 
=MOREC lab2.c
int euclidasm(int m, int n)
{
  int r;
  int remainder = m % n;
  if (n>0)
    r = euclid(n,remainder);
  else 
    r = m;
  return r;
}
=TEX
Now we can test the two functions
=MORECPP lab2.c
int main()
{
  printf("%d\n", euclid(14,12));
  printf("%d\n", euclid(14,11));
  printf("%d\n", euclid(558,198));
  printf("The euclid-asm version of the previous line:%d\n", euclidasm(558,198));
}
=TEX
\includegraphics[scale =0.8]{gcd_c.png}
\par When we run the program, we get the same results as SML gives us, (2, 1, 18), which is a good sign. Note that the C implementation is similar to the SML implementation in which we give a clear algorithm for calculating the GCD (if, else...). 
\par However, I wonder if there is a difference in the performance of the function in the two languages. The only difference I can think of is the strictness of how the functions may be run, which is a nonissue in this case due to the type casting/checking of C. 
\clearpage
\section{GCD in ASM}
Although this is a direct translation from math to SML to C, it is difficult to continue onto ASM because of the one-to-many relationship between C and ASM (and IA32 instruction set). For example, ASM does not have direct support for function composition. 
\verb|printf("%d\n", euclid(558,198));| \\
So we have to do something more like this:
\begin{verbatim}
  int t = euclid(558/198);
  printf("%d\n"",t);
\end{verbatim}

But this is not possible since we can't assign a returned value into a memory location. Instead we always use the eax register for return values.
=ASM lab2.s
.data 
  fmt: .string "%d\n" #create label for the format string
.text                 #starts code section
.global _start        #makes sure linker can find start  label
_start:               #indictates start of program
  push $198        # Make sure to check mode for every op ie $
  push $558
  call euclid      # euclid(558,198), should expect return value in EAX
  add $8, %esp     # remember to clean up after every function call
  push %eax
  push $fmt         
  call printf    
  add $8, %esp
=TEX
Since we have finished printing the output of euclid, we can now end the program
=MOREASM lab2.s
  mov $1, %eax  
  mov $0, %ebx
  int $0x80    
=TEX
Definition of Euclid function. Problems to solve:
\begin{itemize}
\item create stack frame (ebp (``base pointer''),esp (``stack pointer''))
\item get parameters from frame (these are offests from ebp)
\item calculate modulus (remainder after integer division)
\item implement if/else statement (using cmpm and jump instructions)
\item call euclid recursively
\item assign a return value (use mov instruction) 
\end{itemize}
=MOREASM lab2.s
euclid:
  mov $0, %eax
  ret 
=TEX
This section shows how the stack pointer is changed as the code executes. \\
%\includegraphics{stackframe.pdf}
\end{document}